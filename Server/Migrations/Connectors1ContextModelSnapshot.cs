// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Scan.Server.Model;

namespace Scan.Server.Migrations
{
    [DbContext(typeof(Connectors1Context))]
    partial class Connectors1ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Latin1_General_CI_AS")
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("Scan.Server.Model.CooisComponent", b =>
                {
                    b.Property<string>("ComponentId")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("ComponentID");

                    b.Property<string>("BaseUoM")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("Batch")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<bool?>("BulkMaterial")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Material")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<bool?>("PhantomItem")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ProdOrder")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("QtyWithdrawn")
                        .HasColumnType("decimal(9, 3)");

                    b.Property<int>("RequirementNo")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("RequirementQty")
                        .HasColumnType("decimal(9, 3)");

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("StatusID");

                    b.Property<string>("StorageLocation")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.HasKey("ComponentId")
                        .HasName("PK_ID");

                    b.HasIndex(new[] { "Material" }, "IX_CooisComponents_Material");

                    b.HasIndex(new[] { "Material", "RequirementQty" }, "cooiscomponents_idx_material_requirementqty");

                    b.HasIndex(new[] { "ProdOrder" }, "cooiscomponents_idx_prodorder_material_requirementqty");

                    b.HasIndex(new[] { "RequirementQty" }, "cooiscomponents_idx_requirementqty");

                    b.ToTable("CooisComponents", "sap");
                });

            modelBuilder.Entity("Scan.Server.Model.MaterialMaster", b =>
                {
                    b.Property<string>("Material")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Configurable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CostControl")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .IsFixedLength(true);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("Mrpcontroller")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("MRPController");

                    b.Property<string>("ProdnSuperv")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.HasKey("Material")
                        .HasName("PK_Material_MaterialMaster");

                    b.ToTable("MaterialMaster", "sap");
                });

            modelBuilder.Entity("Scan.Server.Model.ProductClassification", b =>
                {
                    b.Property<string>("ClassMaterial")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClassApplicableStandard")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClassDatasheetRef")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<bool?>("ClassIsCemarked")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ClassIsCEMarked");

                    b.Property<short?>("ClassMass")
                        .HasColumnType("INTEGER");

                    b.Property<short?>("ClassMawp")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ClassMAWP");

                    b.Property<short?>("ClassMaxTemp")
                        .HasColumnType("INTEGER");

                    b.Property<short?>("ClassMaxWaterDepth")
                        .HasColumnType("INTEGER");

                    b.Property<short?>("ClassMinTemp")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClassModifiedBy")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<bool?>("ClassPartNoAliased")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClassPsl")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("ClassPSL");

                    b.Property<string>("ClassRangeId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("ClassRangeID");

                    b.Property<string>("ClassRatedVoltage")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClassStatusId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("ClassStatusID");

                    b.Property<string>("ClassTemplateId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("ClassTemplateID");

                    b.Property<byte[]>("ClassTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("ClassTypeId")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("ClassTypeID");

                    b.Property<string>("ClassValidatedBy")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ClassValidationDate")
                        .HasColumnType("date");

                    b.HasKey("ClassMaterial")
                        .HasName("PK_Material");

                    b.HasIndex(new[] { "ClassRangeId", "ClassMaterial" }, "productclassificat_idx_classrangeid_classmaterial");

                    b.HasIndex(new[] { "ClassTypeId", "ClassMaterial" }, "productclassificat_idx_classtypeid_classmaterial");

                    b.ToTable("ProductClassification", "plm");
                });

            modelBuilder.Entity("Scan.Server.Model.SerialNo", b =>
                {
                    b.Property<long>("ProdOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SerialNo1")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("SerialNo");

                    b.HasKey("ProdOrder", "SerialNo1")
                        .HasName("PK_ProdOrderSerialNo");

                    b.ToTable("SerialNo", "sap");
                });
#pragma warning restore 612, 618
        }
    }
}
